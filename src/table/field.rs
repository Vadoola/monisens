use crate::tool::validation::validate_word;
use std::collections::HashSet;

use super::error::FieldError;

pub struct Field {
    idx: u8,
    name: String,
    typ: FieldType,
    opts: HashSet<FieldOption>,
}

impl Field {
    pub fn new(idx: u8, name: String, typ: FieldType) -> Result<Self, FieldError> {
        if let Err(err) = validate_word(&name) {
            return Err(FieldError::Validation(err));
        }

        Ok(Field {
            idx,
            name,
            typ,
            opts: HashSet::new(),
        })
    }

    pub fn name(&self) -> &str {
        &self.name
    }

    pub fn add_opt(&mut self, opt: FieldOption) -> Result<(), FieldError> {
        opt.validate_type(&self.typ)?;

        match self.opts.get(&opt) {
            None => {
                self.opts.insert(opt);
                return Ok(());
            }
            Some(o) => Err(FieldError::DuplicateOption(o.clone())),
        }
    }

    pub fn parse_size(&self) -> usize {
        let mut opts_size = 0;
        for opt in self.opts.iter() {
            opts_size += opt.parse_size();
        }

        // <quotes_count> + <name_len> + <space> + <type_len> + <spaces_between_opts> + <opts_len>
        2 + self.name.len() + 1 + self.typ.parse_size() + self.opts.len() + opts_size
    }

    pub fn parse(&self) -> Result<String, FieldError> {
        let mut s = String::with_capacity(self.parse_size());

        s.push('"');
        s.push_str(&self.name);
        s.push_str("\" ");
        s.push_str(&self.typ.parse());
        for opt in self.opts.iter() {
            s.push(' ');
            s.push_str(&opt.parse());
        }

        Ok(s)
    }
}

#[derive(Clone, Debug)]
pub enum FieldType {
    Int32,
    Int64,
    Text,
}

impl FieldType {
    pub fn parse_size(&self) -> usize {
        match *self {
            FieldType::Int32 => 7,
            FieldType::Int64 => 6,
            FieldType::Text => 4,
        }
    }

    pub fn parse(&self) -> String {
        match *self {
            FieldType::Int32 => "INTEGER".to_string(),
            FieldType::Int64 => "BIGINT".to_string(),
            FieldType::Text => "TEXT".to_string(),
        }
    }
}

#[derive(PartialEq, Eq, Hash, Clone, Debug)]
pub enum FieldOption {
    PrimaryKey,
    Unique,
    NotNull,
    AutoIncrement,
    // Default(T?), // пока не знаю, как реализовать
}

impl FieldOption {
    pub fn parse_size(&self) -> usize {
        match *self {
            FieldOption::PrimaryKey => 11,
            FieldOption::Unique => 6,
            FieldOption::NotNull => 8,
            FieldOption::AutoIncrement => 32,
        }
    }

    pub fn parse(&self) -> String {
        match *self {
            FieldOption::PrimaryKey => "PRIMARY KEY".to_string(),
            FieldOption::Unique => "UNIQUE".to_string(),
            FieldOption::NotNull => "NOT NULL".to_string(),
            FieldOption::AutoIncrement => "GENERATED BY DEFAULT AS IDENTITY".to_string(),
        }
    }

    pub fn validate_type(&self, typ: &FieldType) -> Result<(), FieldError> {
        if *self == FieldOption::AutoIncrement {
            return match typ {
                FieldType::Int32 => Ok(()),
                FieldType::Int64 => Ok(()),
                _ => Err(FieldError::InvalidTypeOption(typ.clone(), self.clone())),
            };
        }

        Ok(())
    }
}
