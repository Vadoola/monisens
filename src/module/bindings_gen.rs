/* automatically generated by rust-bindgen 0.69.4 */

#![allow(warnings)]

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ConfInfoEntryType {
    ConfInfoEntryTypeSection = 0,
    ConfInfoEntryTypeString = 1,
    ConfInfoEntryTypeInt = 2,
    ConfInfoEntryTypeIntRange = 3,
    ConfInfoEntryTypeFloat = 4,
    ConfInfoEntryTypeFloatRange = 5,
    ConfInfoEntryTypeJSON = 6,
    ConfInfoEntryTypeChoiceList = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfoEntryString {
    pub required: bool,
    pub def: *mut ::std::os::raw::c_char,
    pub min_len: *mut i32,
    pub max_len: *mut i32,
    pub match_regex: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ConfInfoEntryString() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfoEntryString> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfoEntryString>(),
        40usize,
        concat!("Size of: ", stringify!(ConfInfoEntryString))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfoEntryString>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfoEntryString))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryString),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryString),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryString),
            "::",
            stringify!(min_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryString),
            "::",
            stringify!(max_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_regex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryString),
            "::",
            stringify!(match_regex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfoEntryInt {
    pub required: bool,
    pub def: *mut i32,
    pub lt: *mut i32,
    pub gt: *mut i32,
    pub neq: *mut i32,
}
#[test]
fn bindgen_test_layout_ConfInfoEntryInt() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfoEntryInt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfoEntryInt>(),
        40usize,
        concat!("Size of: ", stringify!(ConfInfoEntryInt))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfoEntryInt>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfoEntryInt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryInt),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryInt),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryInt),
            "::",
            stringify!(lt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryInt),
            "::",
            stringify!(gt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).neq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryInt),
            "::",
            stringify!(neq)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfoEntryIntRange {
    pub required: bool,
    pub def_from: *mut i32,
    pub def_to: *mut i32,
    pub min: i32,
    pub max: i32,
}
#[test]
fn bindgen_test_layout_ConfInfoEntryIntRange() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfoEntryIntRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfoEntryIntRange>(),
        32usize,
        concat!("Size of: ", stringify!(ConfInfoEntryIntRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfoEntryIntRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfoEntryIntRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryIntRange),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryIntRange),
            "::",
            stringify!(def_from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryIntRange),
            "::",
            stringify!(def_to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryIntRange),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryIntRange),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfoEntryFloat {
    pub required: bool,
    pub def: *mut f32,
    pub lt: *mut f32,
    pub gt: *mut f32,
    pub neq: *mut f32,
}
#[test]
fn bindgen_test_layout_ConfInfoEntryFloat() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfoEntryFloat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfoEntryFloat>(),
        40usize,
        concat!("Size of: ", stringify!(ConfInfoEntryFloat))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfoEntryFloat>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfoEntryFloat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloat),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloat),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloat),
            "::",
            stringify!(lt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloat),
            "::",
            stringify!(gt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).neq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloat),
            "::",
            stringify!(neq)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfoEntryFloatRange {
    pub required: bool,
    pub def_from: *mut f32,
    pub def_to: *mut f32,
    pub min: f32,
    pub max: f32,
}
#[test]
fn bindgen_test_layout_ConfInfoEntryFloatRange() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfoEntryFloatRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfoEntryFloatRange>(),
        32usize,
        concat!("Size of: ", stringify!(ConfInfoEntryFloatRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfoEntryFloatRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfoEntryFloatRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloatRange),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloatRange),
            "::",
            stringify!(def_from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloatRange),
            "::",
            stringify!(def_to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloatRange),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryFloatRange),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfoEntryJSON {
    pub required: bool,
    pub def: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ConfInfoEntryJSON() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfoEntryJSON> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfoEntryJSON>(),
        16usize,
        concat!("Size of: ", stringify!(ConfInfoEntryJSON))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfoEntryJSON>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfoEntryJSON))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryJSON),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryJSON),
            "::",
            stringify!(def)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfoEntryChoiceList {
    pub required: bool,
    pub def: *mut i32,
    pub choices: *mut *mut ::std::os::raw::c_char,
    pub chioces_len: i32,
}
#[test]
fn bindgen_test_layout_ConfInfoEntryChoiceList() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfoEntryChoiceList> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfoEntryChoiceList>(),
        32usize,
        concat!("Size of: ", stringify!(ConfInfoEntryChoiceList))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfoEntryChoiceList>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfoEntryChoiceList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).required) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryChoiceList),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryChoiceList),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).choices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryChoiceList),
            "::",
            stringify!(choices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chioces_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntryChoiceList),
            "::",
            stringify!(chioces_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfoEntry {
    pub id: i32,
    pub name: *mut ::std::os::raw::c_char,
    pub typ: ConfInfoEntryType,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ConfInfoEntry() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfoEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfoEntry>(),
        32usize,
        concat!("Size of: ", stringify!(ConfInfoEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfoEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfoEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntry),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typ) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntry),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfoEntry),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfInfo {
    pub confs: *mut ConfInfoEntry,
    pub confs_len: i32,
}
#[test]
fn bindgen_test_layout_ConfInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ConfInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfInfo>(),
        16usize,
        concat!("Size of: ", stringify!(ConfInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfo),
            "::",
            stringify!(confs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confs_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfInfo),
            "::",
            stringify!(confs_len)
        )
    );
}
pub type device_conn_info_callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut ConfInfo),
>;
pub type device_conf_info_callback = ::std::option::Option<
    unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void, info: *mut ConfInfo),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfEntry {
    pub id: i32,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ConfEntry() {
    const UNINIT: ::std::mem::MaybeUninit<ConfEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfEntry>(),
        16usize,
        concat!("Size of: ", stringify!(ConfEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(ConfEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfEntry),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfEntry),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Conf {
    pub confs: *mut ConfEntry,
    pub confs_len: i32,
}
#[test]
fn bindgen_test_layout_Conf() {
    const UNINIT: ::std::mem::MaybeUninit<Conf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Conf>(),
        16usize,
        concat!("Size of: ", stringify!(Conf))
    );
    assert_eq!(
        ::std::mem::align_of::<Conf>(),
        8usize,
        concat!("Alignment of ", stringify!(Conf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Conf),
            "::",
            stringify!(confs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confs_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Conf),
            "::",
            stringify!(confs_len)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SensorDataType {
    SensorDataTypeInt16 = 0,
    SensorDataTypeInt32 = 1,
    SensorDataTypeInt64 = 2,
    SensorDataTypeFloat32 = 3,
    SensorDataTypeFloat64 = 4,
    SensorDataTypeTimestamp = 5,
    SensorDataTypeString = 6,
    SensorDataTypeJSON = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SensorDataTypeInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub typ: SensorDataType,
}
#[test]
fn bindgen_test_layout_SensorDataTypeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<SensorDataTypeInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SensorDataTypeInfo>(),
        16usize,
        concat!("Size of: ", stringify!(SensorDataTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorDataTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorDataTypeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorDataTypeInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorDataTypeInfo),
            "::",
            stringify!(typ)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SensorTypeInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub data_type_infos_len: i32,
    pub data_type_infos: *mut SensorDataTypeInfo,
}
#[test]
fn bindgen_test_layout_SensorTypeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<SensorTypeInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SensorTypeInfo>(),
        24usize,
        concat!("Size of: ", stringify!(SensorTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorTypeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorTypeInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_type_infos_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorTypeInfo),
            "::",
            stringify!(data_type_infos_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_type_infos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorTypeInfo),
            "::",
            stringify!(data_type_infos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SensorTypeInfos {
    pub sensor_type_infos_len: i32,
    pub sensor_type_infos: *mut SensorTypeInfo,
}
#[test]
fn bindgen_test_layout_SensorTypeInfos() {
    const UNINIT: ::std::mem::MaybeUninit<SensorTypeInfos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SensorTypeInfos>(),
        16usize,
        concat!("Size of: ", stringify!(SensorTypeInfos))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorTypeInfos>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorTypeInfos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_type_infos_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorTypeInfos),
            "::",
            stringify!(sensor_type_infos_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_type_infos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorTypeInfos),
            "::",
            stringify!(sensor_type_infos)
        )
    );
}
pub type sensor_type_infos_callback = ::std::option::Option<
    unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void, infos: *mut SensorTypeInfos),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SensorMsgData {
    pub name: *mut ::std::os::raw::c_char,
    pub typ: SensorDataType,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SensorMsgData() {
    const UNINIT: ::std::mem::MaybeUninit<SensorMsgData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SensorMsgData>(),
        24usize,
        concat!("Size of: ", stringify!(SensorMsgData))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorMsgData>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorMsgData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorMsgData),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorMsgData),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorMsgData),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SensorMsg {
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut SensorMsgData,
    pub data_len: i32,
}
#[test]
fn bindgen_test_layout_SensorMsg() {
    const UNINIT: ::std::mem::MaybeUninit<SensorMsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SensorMsg>(),
        24usize,
        concat!("Size of: ", stringify!(SensorMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorMsg>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorMsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorMsg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorMsg),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorMsg),
            "::",
            stringify!(data_len)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum MsgCode {
    MsgCodeInfo = 0,
    MsgCodeWarn = 1,
    MsgCodeError = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommonMsg {
    pub code: MsgCode,
    pub msg: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CommonMsg() {
    const UNINIT: ::std::mem::MaybeUninit<CommonMsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CommonMsg>(),
        16usize,
        concat!("Size of: ", stringify!(CommonMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<CommonMsg>(),
        8usize,
        concat!("Alignment of ", stringify!(CommonMsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonMsg),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CommonMsg),
            "::",
            stringify!(msg)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum MessageType {
    MessageTypeSensor = 0,
    MessageTypeCommon = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Message {
    pub typ: MessageType,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Message() {
    const UNINIT: ::std::mem::MaybeUninit<Message> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Message>(),
        16usize,
        concat!("Size of: ", stringify!(Message))
    );
    assert_eq!(
        ::std::mem::align_of::<Message>(),
        8usize,
        concat!("Alignment of ", stringify!(Message))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Message),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Message),
            "::",
            stringify!(data)
        )
    );
}
pub type handle_msg_func = ::std::option::Option<
    unsafe extern "C" fn(handler: *mut ::std::os::raw::c_void, msg_data: Message),
>;
pub type mod_version_fn = ::std::option::Option<unsafe extern "C" fn() -> u8>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Functions {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            handler: *mut *mut ::std::os::raw::c_void,
            data_dir: *mut ::std::os::raw::c_char,
        ),
    >,
    pub obtain_device_conn_info: ::std::option::Option<
        unsafe extern "C" fn(
            handler: *mut ::std::os::raw::c_void,
            obj: *mut ::std::os::raw::c_void,
            callback: device_conn_info_callback,
        ),
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(handler: *mut ::std::os::raw::c_void)>,
    pub connect_device: ::std::option::Option<
        unsafe extern "C" fn(handler: *mut ::std::os::raw::c_void, connect_conf: *mut Conf) -> u8,
    >,
    pub obtain_device_conf_info: ::std::option::Option<
        unsafe extern "C" fn(
            handler: *mut ::std::os::raw::c_void,
            obj: *mut ::std::os::raw::c_void,
            callback: device_conf_info_callback,
        ),
    >,
    pub configure_device: ::std::option::Option<
        unsafe extern "C" fn(handler: *mut ::std::os::raw::c_void, device_conf: *mut Conf) -> u8,
    >,
    pub obtain_sensor_type_infos: ::std::option::Option<
        unsafe extern "C" fn(
            handler: *mut ::std::os::raw::c_void,
            obj: *mut ::std::os::raw::c_void,
            callback: sensor_type_infos_callback,
        ) -> u8,
    >,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            handler: *mut ::std::os::raw::c_void,
            msg_handler: *mut ::std::os::raw::c_void,
            handle_func: handle_msg_func,
        ) -> u8,
    >,
    pub stop:
        ::std::option::Option<unsafe extern "C" fn(handler: *mut ::std::os::raw::c_void) -> u8>,
}
#[test]
fn bindgen_test_layout_Functions() {
    const UNINIT: ::std::mem::MaybeUninit<Functions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Functions>(),
        72usize,
        concat!("Size of: ", stringify!(Functions))
    );
    assert_eq!(
        ::std::mem::align_of::<Functions>(),
        8usize,
        concat!("Alignment of ", stringify!(Functions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obtain_device_conn_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(obtain_device_conn_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect_device) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(connect_device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obtain_device_conf_info) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(obtain_device_conf_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configure_device) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(configure_device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obtain_sensor_type_infos) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(obtain_sensor_type_infos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(stop)
        )
    );
}
pub type functions_fn = ::std::option::Option<unsafe extern "C" fn() -> Functions>;
